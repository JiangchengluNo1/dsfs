// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/noding.proto

package noding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Noding_Heart_FullMethodName = "/noding.Noding/Heart"
	Noding_Wake_FullMethodName  = "/noding.Noding/Wake"
)

// NodingClient is the client API for Noding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodingClient interface {
	Heart(ctx context.Context, in *Hearting, opts ...grpc.CallOption) (*HeartingResponse, error)
	Wake(ctx context.Context, in *WakeUp, opts ...grpc.CallOption) (*WakeUpResponse, error)
}

type nodingClient struct {
	cc grpc.ClientConnInterface
}

func NewNodingClient(cc grpc.ClientConnInterface) NodingClient {
	return &nodingClient{cc}
}

func (c *nodingClient) Heart(ctx context.Context, in *Hearting, opts ...grpc.CallOption) (*HeartingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartingResponse)
	err := c.cc.Invoke(ctx, Noding_Heart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodingClient) Wake(ctx context.Context, in *WakeUp, opts ...grpc.CallOption) (*WakeUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WakeUpResponse)
	err := c.cc.Invoke(ctx, Noding_Wake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodingServer is the server API for Noding service.
// All implementations must embed UnimplementedNodingServer
// for forward compatibility.
type NodingServer interface {
	Heart(context.Context, *Hearting) (*HeartingResponse, error)
	Wake(context.Context, *WakeUp) (*WakeUpResponse, error)
	mustEmbedUnimplementedNodingServer()
}

// UnimplementedNodingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodingServer struct{}

func (UnimplementedNodingServer) Heart(context.Context, *Hearting) (*HeartingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heart not implemented")
}
func (UnimplementedNodingServer) Wake(context.Context, *WakeUp) (*WakeUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wake not implemented")
}
func (UnimplementedNodingServer) mustEmbedUnimplementedNodingServer() {}
func (UnimplementedNodingServer) testEmbeddedByValue()                {}

// UnsafeNodingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodingServer will
// result in compilation errors.
type UnsafeNodingServer interface {
	mustEmbedUnimplementedNodingServer()
}

func RegisterNodingServer(s grpc.ServiceRegistrar, srv NodingServer) {
	// If the following call pancis, it indicates UnimplementedNodingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Noding_ServiceDesc, srv)
}

func _Noding_Heart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hearting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodingServer).Heart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Noding_Heart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodingServer).Heart(ctx, req.(*Hearting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Noding_Wake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WakeUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodingServer).Wake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Noding_Wake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodingServer).Wake(ctx, req.(*WakeUp))
	}
	return interceptor(ctx, in, info, handler)
}

// Noding_ServiceDesc is the grpc.ServiceDesc for Noding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Noding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noding.Noding",
	HandlerType: (*NodingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heart",
			Handler:    _Noding_Heart_Handler,
		},
		{
			MethodName: "Wake",
			Handler:    _Noding_Wake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/noding.proto",
}
