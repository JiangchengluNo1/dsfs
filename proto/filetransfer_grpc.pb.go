// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/filetransfer.proto

package filetransfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HeartDance_HeartDance_FullMethodName    = "/filetransfer.HeartDance/HeartDance"
	HeartDance_MasterWakeUp_FullMethodName  = "/filetransfer.HeartDance/MasterWakeUp"
	HeartDance_TransportFile_FullMethodName = "/filetransfer.HeartDance/TransportFile"
)

// HeartDanceClient is the client API for HeartDance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartDanceClient interface {
	HeartDance(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Alive, error)
	MasterWakeUp(ctx context.Context, in *MWU, opts ...grpc.CallOption) (*Alive, error)
	TransportFile(ctx context.Context, in *FileContents, opts ...grpc.CallOption) (*ResponseFileUp, error)
}

type heartDanceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartDanceClient(cc grpc.ClientConnInterface) HeartDanceClient {
	return &heartDanceClient{cc}
}

func (c *heartDanceClient) HeartDance(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Alive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Alive)
	err := c.cc.Invoke(ctx, HeartDance_HeartDance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartDanceClient) MasterWakeUp(ctx context.Context, in *MWU, opts ...grpc.CallOption) (*Alive, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Alive)
	err := c.cc.Invoke(ctx, HeartDance_MasterWakeUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartDanceClient) TransportFile(ctx context.Context, in *FileContents, opts ...grpc.CallOption) (*ResponseFileUp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseFileUp)
	err := c.cc.Invoke(ctx, HeartDance_TransportFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeartDanceServer is the server API for HeartDance service.
// All implementations must embed UnimplementedHeartDanceServer
// for forward compatibility.
type HeartDanceServer interface {
	HeartDance(context.Context, *Signal) (*Alive, error)
	MasterWakeUp(context.Context, *MWU) (*Alive, error)
	TransportFile(context.Context, *FileContents) (*ResponseFileUp, error)
	mustEmbedUnimplementedHeartDanceServer()
}

// UnimplementedHeartDanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHeartDanceServer struct{}

func (UnimplementedHeartDanceServer) HeartDance(context.Context, *Signal) (*Alive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartDance not implemented")
}
func (UnimplementedHeartDanceServer) MasterWakeUp(context.Context, *MWU) (*Alive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterWakeUp not implemented")
}
func (UnimplementedHeartDanceServer) TransportFile(context.Context, *FileContents) (*ResponseFileUp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransportFile not implemented")
}
func (UnimplementedHeartDanceServer) mustEmbedUnimplementedHeartDanceServer() {}
func (UnimplementedHeartDanceServer) testEmbeddedByValue()                    {}

// UnsafeHeartDanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartDanceServer will
// result in compilation errors.
type UnsafeHeartDanceServer interface {
	mustEmbedUnimplementedHeartDanceServer()
}

func RegisterHeartDanceServer(s grpc.ServiceRegistrar, srv HeartDanceServer) {
	// If the following call pancis, it indicates UnimplementedHeartDanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HeartDance_ServiceDesc, srv)
}

func _HeartDance_HeartDance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartDanceServer).HeartDance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeartDance_HeartDance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartDanceServer).HeartDance(ctx, req.(*Signal))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeartDance_MasterWakeUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MWU)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartDanceServer).MasterWakeUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeartDance_MasterWakeUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartDanceServer).MasterWakeUp(ctx, req.(*MWU))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeartDance_TransportFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartDanceServer).TransportFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeartDance_TransportFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartDanceServer).TransportFile(ctx, req.(*FileContents))
	}
	return interceptor(ctx, in, info, handler)
}

// HeartDance_ServiceDesc is the grpc.ServiceDesc for HeartDance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeartDance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filetransfer.HeartDance",
	HandlerType: (*HeartDanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartDance",
			Handler:    _HeartDance_HeartDance_Handler,
		},
		{
			MethodName: "MasterWakeUp",
			Handler:    _HeartDance_MasterWakeUp_Handler,
		},
		{
			MethodName: "TransportFile",
			Handler:    _HeartDance_TransportFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/filetransfer.proto",
}
